##puerto mi computadora: puerto del contenedor
ports:
    -27017:27017

mi carpeta: con lo del imagen
volumen:
 - ./mongo:/data/db


 seccion 8: seed y paginacion

************************** forma de insertar uno por uno - profesor

 @Injectable()
export class SeedService {
  
  constructor(
    @InjectModel(Pokemon.name)
        private readonly pokemonModel: Model<Pokemon>,
  ) {}

  private readonly axios: AxiosInstance = axios;
  
  
  async exececuteSeed() {
    
    const {data} = await this.axios.get<PokeResponse>('https://pokeapi.co/api/v2/pokemon?limit=10')
   
    //forma 1 de hacer inserciones multiples
    const insertPromisesArray: Promise<Pokemon>[] = [];
    
    data.results.forEach( async ({name, url}) => {
      const segments = url.split('/');
      const no:number = +segments[segments.length - 2];

      const pokemon = await this.pokemonModel.create({name, no});
    
    });

   return 'Seed Executed';
  }

  ************************** forma de insertar uno por uno - mi solucion
 
  @Injectable()
export class SeedService {
    private readonly pokemonService: PokemonService,
  ) {}

  private readonly axios: AxiosInstance = axios;
  
  
  async exececuteSeed() {
   
    const {data} = await this.axios.get<PokeResponse>('https://pokeapi.co/api/v2/pokemon?limit=10')

    data.results.forEach( async ({name, url}) => {
      const segments = url.split('/');
      const no:number = +segments[segments.length - 2];
      await this.pokemonService.create({name, no});
    });
    
    return 'Seed Executed';
  }


  *****SOLUCIONES PARA INSERTAR TODO SIMULTANEAMENTE

  SOLUCION 1 - profesor


@Injectable()
export class SeedService {
  constructor(
    @InjectModel(Pokemon.name)
        private readonly pokemonModel: Model<Pokemon>,
  ) {}

  private readonly axios: AxiosInstance = axios;
  
  
  async exececuteSeed() {
    
    await this.pokemonModel.deleteMany();

    const {data} = await this.axios.get<PokeResponse>('https://pokeapi.co/api/v2/pokemon?limit=10')
   
    const insertPromisesArray: Promise<Pokemon>[] = [];
    
    data.results.forEach(({name, url}) => {
      const segments = url.split('/');
      const no:number = +segments[segments.length - 2];
      
      insertPromisesArray.push(
        this.pokemonModel.create({name, no}) 
      );

    });

    await Promise.all(insertPromisesArray);
    return 'Seed Executed';
  }
}


/// ponerlo si se usa el swagger
,
    "plugins": ["@nestjs/swagger"]